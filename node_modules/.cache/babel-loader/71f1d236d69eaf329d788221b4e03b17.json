{"ast":null,"code":"import React from 'react';\nimport './uploaddropzone.css';\nimport { Row, Col } from 'react-bootstrap';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Divider from '@material-ui/core/Divider';\nimport { TiDeleteOutline } from 'react-icons/ti';\nimport DropzoneContainer from '../dropbox/DropzoneContainer';\nimport Options from './Options';\nimport { css, ThemeProvider } from 'styled-components';\nimport { base, DocumentPdf, DocumentTxt } from 'grommet-icons';\nimport { deepMerge } from 'grommet-icons/utils';\nimport { useState } from \"react\";\nimport Modal from 'react-bootstrap/Modal';\n\nconst UploadUsingDropzone = props => {\n  const {\n    files,\n    setFiles,\n    uploadFiles,\n    deleteFile,\n    setConfig,\n    config\n  } = props;\n}; // const customColorTheme = deepMerge(base, {\n//   global: {\n//     colors: {\n//       icons: '#333333',\n//     },\n//   },\n//   icon: {\n//     extend: css`\n//       ${(props) =>\n//         props.color === 'brand' &&\n//         `\n//         fill: #64FFDA;\n//         stroke: #64FFDA;\n//       `}\n//     `,\n//   },\n// });\n// const UploadUsingDropzone = (props) => {\n//   const { files, setFiles, uploadFiles, deleteFile, setConfig, config } = props;\n//   // for the modal \n//   const [show, setShow] = useState(false);\n//   // const handleClose = () => setShow(false);\n//   // const handleShow = () => setShow(true);\n//   const handleShow = () => {\n//   }\n//   const handleClose = () => {\n//   }\n//   // check file type\n//   const isJson = (fileType) => {\n//     if (fileType == 'json') {\n//       return true;\n//     } else {\n//       return false;\n//     }\n//   };\n//   // for process button \n//   const handleClick = (file) => {\n//     if (file.length===1){\n//       var fileType = file[0].path.split('.').slice(-1)[0];\n//       if (isJson(fileType)) {\n//         uploadFiles();\n//       } else {\n//         handleShow();\n//       }\n//     } else {\n//       handleShow();\n//     }\n//     // console.log(file)\n//   }  \n//   // for button style\n//   // const useStyles = makeStyles(theme => ({\n//   //   outlined: {\n//   //     color: 'rgb(3, 155, 144)',\n//   //     border: '1px solid',\n//   //     margin: '8px',\n//   //     \"&:hover\": {\n//   //       color: '#b1fdf8'\n//   //     }\n//   //   }\n//   // }));\n//   // const classes = useStyles();\n//   return (\n//     <Row className=\"upload-row\" lg={2} md={2} sm={1} xs={1}>\n//       <Col className=\"upload-column\" lg={5} md={5} sm={12} xs={12}>\n//         {/* <DropzoneContainer files={files} setFiles={setFiles} /> */}\n//         <div className=\"upload-button\">\n//           <Button\n//             variant=\"outlined\"\n//             // onClick={() => handleClick(files)}\n//             // className={classes.outlined}\n//           >\n//             <span>PROCESS</span>\n//           </Button>\n//         </div>\n//         {/* <Modal\n//           show={show}\n//           onHide={handleClose}\n//           backdrop=\"static\"\n//           // keyboard={false}\n//           >\n//           <Modal.Header closeButton>\n//             <Modal.Title>What would you like to analyse?</Modal.Title>\n//           </Modal.Header>\n//           <Modal.Body>\n//              Import option form here \n//             <Options setConfig={setConfig} uploadFiles={uploadFiles}/>\n//           </Modal.Body>\n//           <Modal.Footer>\n//             <Button variant=\"secondary\" onClick={handleClose}>CLOSE</Button>\n//             <Button variant=\"primary\" onClick={uploadFiles}>SUBMIT</Button>\n//           </Modal.Footer>\n//         </Modal> */}\n//       </Col>\n//       <Col className=\"upload-column\" lg={7} md={7} sm={12} xs={12}>\n//         <div className=\"uploaded-files\">\n//           {/* <div className=\"uploaded-files-header\">\n//             <h4>Uploaded Files</h4>\n//             <div className=\"uploaded-files-subheader\">\n//               <span>{files.length} Files</span>\n//               <span>\n//                 {(\n//                   files.reduce((acc, e) => acc + e.size, 0.0) / 1000000\n//                 ).toFixed(2)}{' '}\n//                 MB\n//               </span>\n//             </div>\n//           </div> */}\n//           {/* <Divider className=\"divider\" /> */}\n//           {\n//           // files.map((file, index) => {\n//           //   return (\n//           //     <div className=\"uploaded-file-container\" key={index}>\n//           //       <div className=\"uploaded-file\">\n//           //         <ThemeProvider theme={customColorTheme}>\n//           //           {/* {file.name.substring(\n//           //             file.name.lastIndexOf('.') + 1,\n//           //             file.name.length\n//           //           ) === 'pdf' ? (\n//           //             <DocumentPdf color=\"brand\" />\n//           //           ) : (\n//           //             <DocumentTxt color=\"brand\" />\n//           //           )} */}\n//           //         </ThemeProvider>\n//           //         <div className=\"uploaded-file-details\">\n//           //           <span>File Name: {file.name}</span>\n//           //           <span>File Size: {(file.size / 1000000).toFixed(2)}MB</span>\n//           //         </div>\n//           //       </div>\n//           //       <div className=\"delete-uploaded-file\">\n//           //         <TiDeleteOutline\n//           //           size={30}\n//           //           color=\"red\"\n//           //           // onClick={() => deleteFile(index)}\n//           //         />\n//           //       </div>\n//           //     </div>\n//           //   );\n//           // })\n//           }\n//         </div>\n//       </Col>\n//     </Row>\n//   );\n// };\n\n\n_c = UploadUsingDropzone;\nexport default UploadUsingDropzone;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadUsingDropzone\");","map":{"version":3,"names":["React","Row","Col","Button","makeStyles","Divider","TiDeleteOutline","DropzoneContainer","Options","css","ThemeProvider","base","DocumentPdf","DocumentTxt","deepMerge","useState","Modal","UploadUsingDropzone","props","files","setFiles","uploadFiles","deleteFile","setConfig","config"],"sources":["C:/1.Regine/PDA-APP/frontend/src/AnalysisPage/components/Upload/UploadUsingDropzone.js"],"sourcesContent":["import React from 'react';\r\nimport './uploaddropzone.css';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { TiDeleteOutline } from 'react-icons/ti';\r\nimport DropzoneContainer from '../dropbox/DropzoneContainer';\r\nimport Options from './Options';\r\nimport { css, ThemeProvider } from 'styled-components';\r\nimport { base, DocumentPdf, DocumentTxt } from 'grommet-icons';\r\nimport { deepMerge } from 'grommet-icons/utils';\r\nimport { useState } from \"react\";\r\nimport Modal from 'react-bootstrap/Modal'\r\n\r\n\r\nconst UploadUsingDropzone = (props) =>{\r\n  const{ files, setFiles, uploadFiles, deleteFile, setConfig, config} = props;\r\n}\r\n// const customColorTheme = deepMerge(base, {\r\n//   global: {\r\n//     colors: {\r\n//       icons: '#333333',\r\n//     },\r\n//   },\r\n//   icon: {\r\n//     extend: css`\r\n//       ${(props) =>\r\n//         props.color === 'brand' &&\r\n//         `\r\n//         fill: #64FFDA;\r\n//         stroke: #64FFDA;\r\n//       `}\r\n//     `,\r\n//   },\r\n// });\r\n\r\n// const UploadUsingDropzone = (props) => {\r\n//   const { files, setFiles, uploadFiles, deleteFile, setConfig, config } = props;\r\n\r\n//   // for the modal \r\n//   const [show, setShow] = useState(false);\r\n\r\n//   // const handleClose = () => setShow(false);\r\n//   // const handleShow = () => setShow(true);\r\n\r\n//   const handleShow = () => {\r\n\r\n//   }\r\n\r\n//   const handleClose = () => {\r\n    \r\n//   }\r\n\r\n//   // check file type\r\n  \r\n//   const isJson = (fileType) => {\r\n//     if (fileType == 'json') {\r\n//       return true;\r\n//     } else {\r\n//       return false;\r\n//     }\r\n//   };\r\n\r\n//   // for process button \r\n//   const handleClick = (file) => {\r\n//     if (file.length===1){\r\n//       var fileType = file[0].path.split('.').slice(-1)[0];\r\n//       if (isJson(fileType)) {\r\n//         uploadFiles();\r\n//       } else {\r\n//         handleShow();\r\n//       }\r\n//     } else {\r\n//       handleShow();\r\n//     }\r\n//     // console.log(file)\r\n//   }  \r\n\r\n//   // for button style\r\n//   // const useStyles = makeStyles(theme => ({\r\n//   //   outlined: {\r\n//   //     color: 'rgb(3, 155, 144)',\r\n//   //     border: '1px solid',\r\n//   //     margin: '8px',\r\n//   //     \"&:hover\": {\r\n//   //       color: '#b1fdf8'\r\n//   //     }\r\n//   //   }\r\n//   // }));\r\n//   // const classes = useStyles();\r\n\r\n//   return (\r\n//     <Row className=\"upload-row\" lg={2} md={2} sm={1} xs={1}>\r\n//       <Col className=\"upload-column\" lg={5} md={5} sm={12} xs={12}>\r\n//         {/* <DropzoneContainer files={files} setFiles={setFiles} /> */}\r\n\r\n//         <div className=\"upload-button\">\r\n//           <Button\r\n//             variant=\"outlined\"\r\n//             // onClick={() => handleClick(files)}\r\n//             // className={classes.outlined}\r\n//           >\r\n//             <span>PROCESS</span>\r\n//           </Button>\r\n//         </div>\r\n//         {/* <Modal\r\n//           show={show}\r\n//           onHide={handleClose}\r\n//           backdrop=\"static\"\r\n//           // keyboard={false}\r\n//           >\r\n          \r\n//           <Modal.Header closeButton>\r\n//             <Modal.Title>What would you like to analyse?</Modal.Title>\r\n//           </Modal.Header>\r\n//           <Modal.Body>\r\n//              Import option form here \r\n//             <Options setConfig={setConfig} uploadFiles={uploadFiles}/>\r\n//           </Modal.Body>\r\n//           <Modal.Footer>\r\n//             <Button variant=\"secondary\" onClick={handleClose}>CLOSE</Button>\r\n//             <Button variant=\"primary\" onClick={uploadFiles}>SUBMIT</Button>\r\n//           </Modal.Footer>\r\n//         </Modal> */}\r\n//       </Col>\r\n\r\n//       <Col className=\"upload-column\" lg={7} md={7} sm={12} xs={12}>\r\n//         <div className=\"uploaded-files\">\r\n//           {/* <div className=\"uploaded-files-header\">\r\n//             <h4>Uploaded Files</h4>\r\n//             <div className=\"uploaded-files-subheader\">\r\n//               <span>{files.length} Files</span>\r\n//               <span>\r\n//                 {(\r\n//                   files.reduce((acc, e) => acc + e.size, 0.0) / 1000000\r\n//                 ).toFixed(2)}{' '}\r\n//                 MB\r\n//               </span>\r\n//             </div>\r\n//           </div> */}\r\n//           {/* <Divider className=\"divider\" /> */}\r\n\r\n\r\n//           {\r\n//           // files.map((file, index) => {\r\n//           //   return (\r\n//           //     <div className=\"uploaded-file-container\" key={index}>\r\n//           //       <div className=\"uploaded-file\">\r\n//           //         <ThemeProvider theme={customColorTheme}>\r\n//           //           {/* {file.name.substring(\r\n//           //             file.name.lastIndexOf('.') + 1,\r\n//           //             file.name.length\r\n//           //           ) === 'pdf' ? (\r\n//           //             <DocumentPdf color=\"brand\" />\r\n//           //           ) : (\r\n//           //             <DocumentTxt color=\"brand\" />\r\n//           //           )} */}\r\n//           //         </ThemeProvider>\r\n//           //         <div className=\"uploaded-file-details\">\r\n//           //           <span>File Name: {file.name}</span>\r\n//           //           <span>File Size: {(file.size / 1000000).toFixed(2)}MB</span>\r\n//           //         </div>\r\n//           //       </div>\r\n//           //       <div className=\"delete-uploaded-file\">\r\n//           //         <TiDeleteOutline\r\n//           //           size={30}\r\n//           //           color=\"red\"\r\n//           //           // onClick={() => deleteFile(index)}\r\n//           //         />\r\n//           //       </div>\r\n//           //     </div>\r\n//           //   );\r\n//           // })\r\n//           }\r\n//         </div>\r\n//       </Col>\r\n//     </Row>\r\n//   );\r\n// };\r\n\r\nexport default UploadUsingDropzone;\r\n\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,sBAAP;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,GAAT,EAAcC,aAAd,QAAmC,mBAAnC;AACA,SAASC,IAAT,EAAeC,WAAf,EAA4BC,WAA5B,QAA+C,eAA/C;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;;AAGA,MAAMC,mBAAmB,GAAIC,KAAD,IAAU;EACpC,MAAK;IAAEC,KAAF;IAASC,QAAT;IAAmBC,WAAnB;IAAgCC,UAAhC;IAA4CC,SAA5C;IAAuDC;EAAvD,IAAiEN,KAAtE;AACD,CAFD,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAnKMD,mB;AAqKN,eAAeA,mBAAf"},"metadata":{},"sourceType":"module"}
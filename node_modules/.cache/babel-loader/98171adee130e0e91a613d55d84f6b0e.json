{"ast":null,"code":"var _jsxFileName = \"C:\\\\1.Regine\\\\PDA-APP\\\\frontend\\\\src\\\\AnalysisPage\\\\components\\\\Upload\\\\UploadUsingDropzone.js\";\nimport React from 'react';\nimport './uploaddropzone.css';\nimport { Row, Col } from 'react-bootstrap';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Divider from '@material-ui/core/Divider';\nimport { TiDeleteOutline } from 'react-icons/ti';\nimport DropzoneContainer from '../dropbox/DropzoneContainer';\nimport Options from './Options';\nimport { css, ThemeProvider } from 'styled-components';\nimport { base, DocumentPdf, DocumentTxt } from 'grommet-icons';\nimport { deepMerge } from 'grommet-icons/utils';\nimport { useState } from \"react\";\nimport Modal from 'react-bootstrap/Modal'; // const UploadUsingDropzone = (props) =>{\n//   const{ files, setFiles, uploadFiles, deleteFile, setConfig, config} = props;\n// }\n// const customColorTheme = deepMerge(base, {\n//   global: {\n//     colors: {\n//       icons: '#333333',\n//     },\n//   },\n//   icon: {\n//     extend: css`\n//       ${(props) =>\n//         props.color === 'brand' &&\n//         `\n//         fill: #64FFDA;\n//         stroke: #64FFDA;\n//       `}\n//     `,\n//   },\n// });\n// for the modal \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [show, setShow] = useState(false); // const handleClose = () => setShow(false);\n// const handleShow = () => setShow(true);\n\nconst handleShow = () => {};\n\nconst handleClose = () => {}; // check file type\n\n\nconst isJson = fileType => {\n  if (fileType == 'json') {\n    return true;\n  } else {\n    return false;\n  }\n}; // for process button \n\n\nconst handleClick = file => {\n  if (file.length === 1) {\n    var fileType = file[0].path.split('.').slice(-1)[0];\n\n    if (isJson(fileType)) {\n      uploadFiles();\n    } else {\n      handleShow();\n    }\n  } else {\n    handleShow();\n  } // console.log(file)\n\n}; // for button style\n\n\nconst useStyles = makeStyles(theme => ({\n  outlined: {\n    color: 'rgb(3, 155, 144)',\n    border: '1px solid',\n    margin: '8px',\n    \"&:hover\": {\n      color: '#b1fdf8'\n    }\n  }\n}));\nconst classes = useStyles(); // return (\n\n{\n  /* <div className=\"upload-row\" lg={2} md={2} sm={1} xs={1}>\r\n   <div className=\"upload-column\" lg={5} md={5} sm={12} xs={12}> */\n}\n{\n  /* <DropzoneContainer files={files} setFiles={setFiles} /> */\n}\n{\n  /* <div className=\"upload-button\">\r\n   <Button\r\n     variant=\"outlined\"\r\n     onClick={() => handleClick(files)}\r\n     className={classes.outlined}\r\n   >\r\n     <span>PROCESS</span>\r\n   </Button>\r\n  </div> */\n}\n{\n  /* <Modal\r\n   show={show}\r\n   onHide={handleClose}\r\n   backdrop=\"static\"\r\n   keyboard={false}\r\n   >\r\n   \r\n    <Modal.Header closeButton>\r\n  //             <Modal.Title>What would you like to analyse?</Modal.Title>\r\n    </Modal.Header>\r\n    <Modal.Body>\r\n       Import option form here \r\n      <Options setConfig={setConfig} uploadFiles={uploadFiles}/>\r\n    </Modal.Body>\r\n    <Modal.Footer>\r\n      <Button variant=\"secondary\" onClick={handleClose}>CLOSE</Button>\r\n      <Button variant=\"primary\" onClick={uploadFiles}>SUBMIT</Button>\r\n    </Modal.Footer>\r\n  </Modal>  */\n}\n{\n  /* </div> */\n}\n{\n  /* <div className=\"upload-column\" lg={7} md={7} sm={12} xs={12}>\r\n   <div className=\"uploaded-files\">\r\n     <div className=\"uploaded-files-header\">\r\n      <h4>Uploaded Files</h4>\r\n       <div className=\"uploaded-files-subheader\">\r\n         <span>{files.length} Files</span>\r\n         <span>\r\n           {(\r\n             files.reduce((acc, e) => acc + e.size, 0.0) / 1000000\r\n           ).toFixed(2)}{' '}\r\n           MB\r\n         </span>\r\n       </div>\r\n     </div> \r\n      <Divider className=\"divider\" /> */\n}\n{\n  /* const useStyles = makeStyles(theme => ({ */\n}\n\nconst UploadUsingDropzone = props => {\n  const {\n    files,\n    setFiles,\n    uploadFiles,\n    deleteFile,\n    setConfig,\n    config\n  } = props;\n  const file = files.map(file, index);\n  const customColorTheme = deepMerge(base, {\n    global: {\n      colors: {\n        icons: '#333333'\n      }\n    },\n    icon: {\n      extend: css`\n                    ${props => props.color === 'brand' && `\n                      fill: #64FFDA;\n                      stroke: #64FFDA;\n                    `}\n                  `\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"uploaded-file-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"uploaded-file\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          theme: customColorTheme,\n          children: [\"file.name.substring( file.name.lastIndexOf('.') + 1, file.name.length ) === 'pdf' ? (\", /*#__PURE__*/_jsxDEV(DocumentPdf, {\n            color: \"brand\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 23\n          }, this), \") : (\", /*#__PURE__*/_jsxDEV(DocumentTxt, {\n            color: \"brand\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 23\n          }, this), \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"uploaded-file-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"File Name: \", file.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"File Size: \", (file.size / 1000000).toFixed(2), \"MB\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"delete-uploaded-file\",\n        children: /*#__PURE__*/_jsxDEV(TiDeleteOutline, {\n          size: 30,\n          color: \"red\",\n          onClick: () => deleteFile(index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 15\n    }, this), \",\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 15\n  }, this);\n};\n\n_c = UploadUsingDropzone;\nexport default UploadUsingDropzone;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadUsingDropzone\");","map":{"version":3,"names":["React","Row","Col","Button","makeStyles","Divider","TiDeleteOutline","DropzoneContainer","Options","css","ThemeProvider","base","DocumentPdf","DocumentTxt","deepMerge","useState","Modal","show","setShow","handleShow","handleClose","isJson","fileType","handleClick","file","length","path","split","slice","uploadFiles","useStyles","theme","outlined","color","border","margin","classes","UploadUsingDropzone","props","files","setFiles","deleteFile","setConfig","config","map","index","customColorTheme","global","colors","icons","icon","extend","name","size","toFixed"],"sources":["C:/1.Regine/PDA-APP/frontend/src/AnalysisPage/components/Upload/UploadUsingDropzone.js"],"sourcesContent":["import React from 'react';\r\nimport './uploaddropzone.css';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { TiDeleteOutline } from 'react-icons/ti';\r\nimport DropzoneContainer from '../dropbox/DropzoneContainer';\r\nimport Options from './Options';\r\nimport { css, ThemeProvider } from 'styled-components';\r\nimport { base, DocumentPdf, DocumentTxt } from 'grommet-icons';\r\nimport { deepMerge } from 'grommet-icons/utils';\r\nimport { useState } from \"react\";\r\nimport Modal from 'react-bootstrap/Modal'\r\n\r\n\r\n// const UploadUsingDropzone = (props) =>{\r\n//   const{ files, setFiles, uploadFiles, deleteFile, setConfig, config} = props;\r\n// }\r\n// const customColorTheme = deepMerge(base, {\r\n//   global: {\r\n//     colors: {\r\n//       icons: '#333333',\r\n//     },\r\n//   },\r\n//   icon: {\r\n//     extend: css`\r\n//       ${(props) =>\r\n//         props.color === 'brand' &&\r\n//         `\r\n//         fill: #64FFDA;\r\n//         stroke: #64FFDA;\r\n//       `}\r\n//     `,\r\n//   },\r\n// });\r\n\r\n\r\n  // for the modal \r\n  const [show, setShow] = useState(false);\r\n\r\n  // const handleClose = () => setShow(false);\r\n  // const handleShow = () => setShow(true);\r\n\r\n  const handleShow = () => {\r\n\r\n  }\r\n\r\n  const handleClose = () => {\r\n    \r\n  }\r\n\r\n  // check file type\r\n  \r\n  const isJson = (fileType) => {\r\n    if (fileType == 'json') {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // for process button \r\n  const handleClick = (file) => {\r\n    if (file.length===1){\r\n      var fileType = file[0].path.split('.').slice(-1)[0];\r\n      if (isJson(fileType)) {\r\n        uploadFiles();\r\n      } else {\r\n        handleShow();\r\n      }\r\n    } else {\r\n      handleShow();\r\n    }\r\n    // console.log(file)\r\n  }  \r\n\r\n  // for button style\r\n  const useStyles = makeStyles(theme => ({\r\n    outlined: {\r\n      color: 'rgb(3, 155, 144)',\r\n      border: '1px solid',\r\n      margin: '8px',\r\n      \"&:hover\": {\r\n        color: '#b1fdf8'\r\n      }\r\n    }\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  // return (\r\n   \r\n    {/* <div className=\"upload-row\" lg={2} md={2} sm={1} xs={1}>\r\n      <div className=\"upload-column\" lg={5} md={5} sm={12} xs={12}> */}\r\n        {/* <DropzoneContainer files={files} setFiles={setFiles} /> */}\r\n\r\n        {/* <div className=\"upload-button\">\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={() => handleClick(files)}\r\n            className={classes.outlined}\r\n          >\r\n            <span>PROCESS</span>\r\n          </Button>\r\n        </div> */}\r\n        {/* <Modal\r\n          show={show}\r\n          onHide={handleClose}\r\n          backdrop=\"static\"\r\n          keyboard={false}\r\n          >\r\n          \r\n           <Modal.Header closeButton>\r\n//             <Modal.Title>What would you like to analyse?</Modal.Title>\r\n           </Modal.Header>\r\n           <Modal.Body>\r\n              Import option form here \r\n             <Options setConfig={setConfig} uploadFiles={uploadFiles}/>\r\n           </Modal.Body>\r\n           <Modal.Footer>\r\n             <Button variant=\"secondary\" onClick={handleClose}>CLOSE</Button>\r\n             <Button variant=\"primary\" onClick={uploadFiles}>SUBMIT</Button>\r\n           </Modal.Footer>\r\n         </Modal>  */}\r\n       {/* </div> */}\r\n\r\n       {/* <div className=\"upload-column\" lg={7} md={7} sm={12} xs={12}>\r\n         <div className=\"uploaded-files\">\r\n           <div className=\"uploaded-files-header\">\r\n            <h4>Uploaded Files</h4>\r\n             <div className=\"uploaded-files-subheader\">\r\n               <span>{files.length} Files</span>\r\n               <span>\r\n                 {(\r\n                   files.reduce((acc, e) => acc + e.size, 0.0) / 1000000\r\n                 ).toFixed(2)}{' '}\r\n                 MB\r\n               </span>\r\n             </div>\r\n           </div> \r\n            <Divider className=\"divider\" /> */}\r\n\r\n\r\n          {/* const useStyles = makeStyles(theme => ({ */}\r\n         \r\n          const UploadUsingDropzone = (props) => {\r\n            const { files, setFiles, uploadFiles, deleteFile, setConfig, config } = props;\r\n            const file = (files.map(file, index)) ;\r\n            const customColorTheme = deepMerge(base, {\r\n                global: {\r\n                  colors: {\r\n                    icons: '#333333',\r\n                  },\r\n                },\r\n                icon: {\r\n                  extend: css`\r\n                    ${(props) =>\r\n                      props.color === 'brand' &&\r\n                      `\r\n                      fill: #64FFDA;\r\n                      stroke: #64FFDA;\r\n                    `}\r\n                  `,\r\n                }})\r\n              \r\n            return (\r\n              <React.Fragment>\r\n              <div className=\"uploaded-file-container\" key={index}>\r\n                <div className=\"uploaded-file\">\r\n                  <div theme={customColorTheme}>\r\n                      file.name.substring(\r\n                      file.name.lastIndexOf('.') + 1,\r\n                      file.name.length\r\n                    ) === 'pdf' ? (\r\n                      <DocumentPdf color=\"brand\" />\r\n                    ) : (\r\n                      <DocumentTxt color=\"brand\" />\r\n                    )\r\n                     \r\n                  </div>\r\n                  <div className=\"uploaded-file-details\">\r\n                    <span>File Name: {file.name}</span>\r\n                    <span>File Size: {(file.size / 1000000).toFixed(2)}MB</span>\r\n                  </div>\r\n                </div>\r\n                <div className=\"delete-uploaded-file\">\r\n                  <TiDeleteOutline\r\n                    size={30}\r\n                    color=\"red\"\r\n                    onClick={() => deleteFile(index)}\r\n                  />\r\n                </div>\r\n              </div>,\r\n              </React.Fragment>\r\n            );\r\n          \r\n        }\r\n          \r\n       \r\n\r\nexport default UploadUsingDropzone;\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
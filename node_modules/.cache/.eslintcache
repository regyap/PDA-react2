[{"C:\\1.Regine\\PDA-APP\\frontend\\src\\index.js":"1","C:\\1.Regine\\PDA-APP\\frontend\\src\\reportWebVitals.js":"2","C:\\1.Regine\\PDA-APP\\frontend\\src\\App.js":"3","C:\\1.Regine\\PDA-APP\\frontend\\src\\reducers\\index.js":"4","C:\\1.Regine\\PDA-APP\\frontend\\src\\sagas\\index.js":"5","C:\\1.Regine\\PDA-APP\\frontend\\src\\reducers\\editstate.js":"6","C:\\1.Regine\\PDA-APP\\frontend\\src\\sagas\\editstate.js":"7","C:\\1.Regine\\PDA-APP\\frontend\\src\\utils\\overviewLayout.js":"8","C:\\1.Regine\\PDA-APP\\frontend\\src\\utils\\layout.js":"9","C:\\1.Regine\\PDA-APP\\frontend\\src\\serviceWorker.js":"10","C:\\1.Regine\\PDA-APP\\frontend\\src\\AnalysisPage\\components\\Upload\\UploadBox.js":"11","C:\\1.Regine\\PDA-APP\\frontend\\src\\globalstuff\\components\\NavBar\\NavBar.js":"12","C:\\1.Regine\\PDA-APP\\frontend\\src\\AnalysisPage\\components\\Upload\\Upload.js":"13","C:\\1.Regine\\PDA-APP\\frontend\\src\\AnalysisPage\\components\\Upload\\Options.js":"14","C:\\1.Regine\\PDA-APP\\frontend\\src\\AnalysisPage\\components\\Upload\\FormElements\\Checkbox.js":"15","C:\\1.Regine\\PDA-APP\\frontend\\src\\AnalysisPage\\components\\Upload\\FormElements\\Button.js":"16","C:\\1.Regine\\PDA-APP\\frontend\\src\\AnalysisPage\\components\\Upload\\FormElements\\Select.js":"17","C:\\1.Regine\\PDA-APP\\frontend\\src\\test\\containers\\UploadForm.js":"18","C:\\1.Regine\\PDA-APP\\frontend\\src\\test\\components\\dropzoneField.js":"19","C:\\1.Regine\\PDA-APP\\frontend\\src\\test\\components\\imagePreview.js":"20","C:\\1.Regine\\PDA-APP\\frontend\\src\\test\\components\\showError.js":"21","C:\\1.Regine\\PDA-APP\\frontend\\src\\test\\components\\placeHolder.js":"22","C:\\1.Regine\\PDA-APP\\frontend\\src\\About\\About.js":"23"},{"size":2981,"mtime":1656787286759,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1655711282698,"results":"26","hashOfConfig":"25"},{"size":792,"mtime":1656918203749,"results":"27","hashOfConfig":"25"},{"size":193,"mtime":1654243222098,"results":"28","hashOfConfig":"25"},{"size":168,"mtime":1654243222201,"results":"29","hashOfConfig":"25"},{"size":6361,"mtime":1656484144641,"results":"30","hashOfConfig":"25"},{"size":10520,"mtime":1654243222186,"results":"31","hashOfConfig":"25"},{"size":3716,"mtime":1654243222253,"results":"32","hashOfConfig":"25"},{"size":3437,"mtime":1654243222237,"results":"33","hashOfConfig":"25"},{"size":5086,"mtime":1654243220394,"results":"34","hashOfConfig":"25"},{"size":280,"mtime":1656382861083,"results":"35","hashOfConfig":"25"},{"size":1134,"mtime":1656756082795,"results":"36","hashOfConfig":"25"},{"size":3199,"mtime":1656989381645,"results":"37","hashOfConfig":"25"},{"size":2914,"mtime":1654243221328,"results":"38","hashOfConfig":"25"},{"size":1082,"mtime":1654243221409,"results":"39","hashOfConfig":"25"},{"size":335,"mtime":1654243221394,"results":"40","hashOfConfig":"25"},{"size":833,"mtime":1654243221423,"results":"41","hashOfConfig":"25"},{"size":1991,"mtime":1656574613784,"results":"42","hashOfConfig":"25"},{"size":1591,"mtime":1656576074094,"results":"43","hashOfConfig":"25"},{"size":605,"mtime":1656576073455,"results":"44","hashOfConfig":"25"},{"size":428,"mtime":1656576071512,"results":"45","hashOfConfig":"25"},{"size":546,"mtime":1656576072754,"results":"46","hashOfConfig":"25"},{"size":1734,"mtime":1656786589121,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"hrs2xt",{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"51"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"51"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"51"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"96"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"51"},"C:\\1.Regine\\PDA-APP\\frontend\\src\\index.js",[],[],[],"C:\\1.Regine\\PDA-APP\\frontend\\src\\reportWebVitals.js",[],[],"C:\\1.Regine\\PDA-APP\\frontend\\src\\App.js",["127","128","129","130"],[],"// import logo from './logo.svg';\nimport './App.css';\nimport React, { useEffect, useState } from \"react\";\n\n\nimport NavBar from './globalstuff/components/NavBar/NavBar';\nimport About from './About/About'\nimport Upload from './AnalysisPage/components/Upload/Upload';\n// import MyDropzone from './mydropzone/MyDropzone'\n\nfunction App() {\n  const [check, setCheck] = useState(false);\n  // const [getMovies, setMovies] = useState([]);\n\n\n  // get request\n//   useEffect(()=> {\n//     fetch(\"http://127.0.0.1:5000/movies\").then(response =>\n//       response.json().then(data=> {\n//        setMovies(data);\n//       console.log(data)\n//   })\n//   );\n// },[check]\n\n//   );\n\n  return (\n    <>\n    <NavBar/>\n    <About/>\n    {/* <MyDropz one></MyDropzone></> */}\n  \n  </>\n\n  );\n}\n\n\n\nexport default App;\n","C:\\1.Regine\\PDA-APP\\frontend\\src\\reducers\\index.js",[],[],"C:\\1.Regine\\PDA-APP\\frontend\\src\\sagas\\index.js",[],[],"C:\\1.Regine\\PDA-APP\\frontend\\src\\reducers\\editstate.js",[],[],"C:\\1.Regine\\PDA-APP\\frontend\\src\\sagas\\editstate.js",["131"],[],"import { put, all, call, select, takeEvery } from 'redux-saga/effects';\nimport {\n  types,\n  getNerData,\n  getRelationData,\n} from '../reducers/editstate';\nimport axios from 'axios';\nimport { initialLayout } from '../utils/layout';\nimport { initialOverviewLayout } from '../utils/overviewLayout';\n\n// Posts the updated relation data to the backend and returns the updated network data.\nconst apiPostNetwork = (data) => {\n  const formData = new FormData();\n  formData.append('relationData', JSON.stringify(data));\n  return axios.post('http://localhost:5000/updateNetwork', formData);\n};\n\n// Dispatches the action UPDATED_NETWORK_DATA to update the redux store with the new network data based on the file that was changed.\nfunction* updateNetworkHelper({ data, currentFileName }) {\n  const res = yield call(apiPostNetwork, data);\n  const networkData = res.data;\n  yield put({\n    type: types.UPDATED_NETWORK_DATA,\n    payload: networkData,\n    currentFileName: currentFileName,\n  });\n}\n\n\n// Dispatches the action UPLOADED_CORPUS_DATA to update the redux store with the new corpus data.\nfunction* setCorpusData({ data }) {\n  yield put({\n    type: types.UPLOADED_CORPUS_DATA,\n    payload: data,\n  });\n}\n\n// Dispatches the action SET_FILENAMES and SET_LAYOUT based on the object keys of the corpus data.\nfunction* setFileNames({ data }) {\n  const fileNames = Object.keys(data);\n  yield put({\n    type: types.SET_FILENAMES,\n    payload: fileNames,\n  });\n  var layouts = {};\n  if (fileNames.length > 1) {\n    fileNames\n      .filter((e) => e !== 'Overview')\n      .forEach((e) => (layouts[e] = initialLayout));\n    layouts['Overview'] = initialOverviewLayout;\n  } else {\n    layouts[fileNames[0]] = initialLayout;\n  }\n  yield put({\n    type: types.SET_LAYOUT,\n    payload: layouts,\n  });\n}\n\n// Posts the uploaded files to the backend and returns the output.\nconst apiPost = (payload) => {\n  const formData = new FormData();\n  console.log(\"payload: \", payload)\n  var fileNames = [];\n  for (var i = 0; i < payload.files.length; i++) {\n    formData.append('file'.concat(i.toString()), payload.files[i]);\n    fileNames.push(payload.files[i].name);\n  }\n  fileNames = JSON.stringify(fileNames);\n  formData.append('fileNames', fileNames);\n  formData.append('length', payload.files.length);\n\n  console.log(\"payload files \", payload.files)\n  \n  var configFile = JSON.stringify(payload.config)\n  formData.append('config', configFile);\n\n  console.log(\"config: \", configFile)\n\n  // inspect formData\n  for (var pair of formData.entries()) {\n      console.log(pair[0]+ ', ' + pair[1]); \n  }\n\n  return axios.post('http://uploadfile-sme-project.apps.kw.projectinnovate.sg/uploadFile', formData);\n};\n\n// Posts the JSON document to the backend and returns the output.\nconst apiPostJson = (payload) => {\n  const formData = new FormData();\n  formData.append('existingFile', payload);\n  // 'http://loadexistingfile-alice.apps.8d5714affbde4fa6828a.southeastasia.azmosa.io/loadExistingFile'\n  return axios.post('http://loadexistingfile-sme-project.apps.kw.projectinnovate.sg/loadExistingFile', formData);\n};\n\n// Posts the ObjectID of the document and returns the output from the MongoDB entry corresponding\n// to that ObjectID.\nconst apiPostDb = (payload) => {\n  // 'http://loaddbfile-alice.apps.8d5714affbde4fa6828a.southeastasia.azmosa.io/loadDbFile'\n  return axios.post('http://localhost:5000/loadDbFile', {ID: payload});\n}\n\n\n// Posts the webscape request to the backend and returns the output.\nconst apiScrape = (payload) => {\n  /*\n  Have to convert the dictionary to a compatible object form for Flask to receive properly\n  however, an array will still be received as a string by Flask so\n  manipulate the data form at the scraper side instead\n  see here for more info https://stackoverflow.com/questions/54892531/axios-data-coming-up-as-immutablemultidict-when-sent-to-flask-post-route-bu\n  */\n  \n  const params = new URLSearchParams();\n  const keys = Object.keys(payload);\n  for (let key of keys) {\n      params.append(key, payload[key]);\n  }\n\n  //return axios.post('http://localhost:5000/scrape', params);\n  return axios.post('http://scrape-sme-project.apps.kw.projectinnovate.sg/scrape', params);\n  };\n\n\nvar download_url = null;\n\nexport function get_download_url() {\n  return download_url;\n}\n\n// Uploads the data to the backend to call the respective webscraper API in the backend\n// dispatches the action SCRAPING_SUCCESS or SCRAPING_FAILURE depending\n// on the status of the upload.\nexport function* scrapeData({ payload }) {\n  try {\n    let res;\n    console.log(payload);\n    res = yield call(apiScrape, payload);\n\n    console.log('response', res);\n    download_url = res.data;\n\n    yield put({\n      type: types.SCRAPING_SUCCESS,\n    });\n  } catch (error) {\n    yield put({\n      type: types.SCRAPING_FAILURE,\n    });\n    console.log('Error while scraping', error);\n  }\n}\n \n\n// Uploads the data to the backend based on the input type and\n// dispatches the action UPLOAD_SUCCESS or UPLOAD_FAILURE depending\n// on the status of the upload.\n// If the document uploaded is an existing one (JSON or MongoDB ObjectID),\n// the function dispatches the action SET_EXISTING_DOCUMENT.\nexport function* uploadData({ payload }) {\n  try {\n    let res;\n    if (payload.existing) {\n      if (payload.docId) {\n        res = yield call(apiPostDb, payload.docId);\n        console.log(payload)\n        console.log(res)\n      } else {\n        res = yield call(apiPostJson, payload.files);\n      }\n      console.log(payload)\n      console.log(res)\n      const existingData = res.data;\n\n      // Remove bugs related to network graph when loading existing file\n      existingData.fileNames.forEach((document) => {\n        console.log(existingData);\n        console.log(existingData.corpusData[document]);\n        if (existingData.corpusData[document].network.links.length > 0) {\n          if (existingData.corpusData[document].network.links[0].source.id) {\n            existingData.corpusData[document].network.links.forEach((link) => {\n              link.source = link.source.id;\n              link.target = link.target.id;\n              delete link.__indexColor;\n              delete link.__controlPoints;\n              delete link.__photons;\n              delete link.index;\n            });\n\n            existingData.corpusData[document].network.nodes.forEach((node) => {\n              delete node.index;\n              delete node.x;\n              delete node.y;\n              delete node.vx;\n              delete node.vy;\n              delete node.__indexColor;\n            });\n          }\n        }\n      });\n\n      yield put({\n        type: types.SET_EXISTING_DOCUMENT,\n        payload: existingData,\n      });\n    } else {\n      console.log(\"apipost payload\", payload);\n      res = yield call(apiPost, payload);\n      const newData = res.data;\n      if (Object.keys(newData).length === 0) {\n        throw new Error('Document could not be processed');\n      }\n\n      // Remove bugs related to network graph when generating new data\n      Object.keys(newData.corpusData).forEach((document) => {\n        console.log(newData);\n        console.log(newData.corpusData[document]);\n        if (newData.corpusData[document].network.links.length > 0) {\n          if (newData.corpusData[document].network.links[0].source.id) {\n            newData.corpusData[document].network.links.forEach((link) => {\n              link.source = link.source.id;\n              link.target = link.target.id;\n              delete link.__indexColor;\n              delete link.__controlPoints;\n              delete link.__photons;\n              delete link.index;\n            });\n\n            newData.corpusData[document].network.nodes.forEach((node) => {\n              delete node.index;\n              delete node.x;\n              delete node.y;\n              delete node.vx;\n              delete node.vy;\n              delete node.__indexColor;\n            });\n          }\n        }\n      });\n      const args = { data: newData.corpusData };\n      yield all([call(setCorpusData, args), call(setFileNames, args)]);\n    }\n    yield put({\n      type: types.UPLOAD_SUCCESS,\n    });\n  } catch (error) {\n    yield put({\n      type: types.UPLOAD_FAILURE,\n    });\n    console.log('ERROR', error);\n  }\n}\n\n// Dispatches the action UPDATED_NER_DATA to update the redux store with the new NER data based on the file that was changed.\n// // Updates the relation and network data based on the new changes.\nfunction* updateNer({ payload }) {\n  const { newNer, nerToRelation, currentFileName } = payload;\n  const currentNerData = yield select(getNerData, [currentFileName]);\n  const text = currentNerData.text;\n  const currentRelationData = yield select(getRelationData, currentFileName);\n  var newRelationData;\n  if (nerToRelation[3] === 'DELETE') {\n    newRelationData = currentRelationData.filter((e) => {\n      return (\n        (e.e1 !== nerToRelation[0] || e.e1_id !== nerToRelation[1]) &&\n        (e.e2 !== nerToRelation[0] || e.e2_id !== nerToRelation[1])\n      );\n    });\n  } else {\n    newRelationData = currentRelationData.map((e) => {\n      if (e.e1 === nerToRelation[0] && e.e1_id === nerToRelation[1]) {\n        e.e1_label = nerToRelation[2];\n      } else if (e.e2 === nerToRelation[0] && e.e2_id === nerToRelation[1]) {\n        e.e2_label = nerToRelation[2];\n      }\n      return e;\n    });\n  }\n\n  yield put({\n    type: types.UPDATED_NER_DATA,\n    payload: {\n      text: text,\n      ents: newNer,\n    },\n    currentFileName: currentFileName,\n  });\n  const args = { data: newRelationData, currentFileName: currentFileName };\n  yield all([\n    call(updateRelationHelper, args),\n    call(updateNetworkHelper, args),\n  ]);\n}\n\n// Dispatches the action UPDATED_RELATION_DATA to update the redux store with the new relation data based on the file that was changed.\nfunction* updateRelationHelper({ data, currentFileName }) {\n  yield put({\n    type: types.UPDATED_RELATION_DATA,\n    payload: data,\n    currentFileName: currentFileName,\n  });\n}\n\n// Updates the relation and network data based on the new changes.\nfunction* updateRelation({ payload }) {\n  const { newRelation, currentFileName } = payload;\n  const args = { data: newRelation, currentFileName: currentFileName };\n  yield all([\n    call(updateRelationHelper, args),\n    call(updateNetworkHelper, args),\n  ]);\n}\n\nexport default [\n  takeEvery(types.UPLOADING_DATA, uploadData),\n  takeEvery(types.SCRAPING_DATA, scrapeData),\n  takeEvery(types.UPDATING_NER_DATA, updateNer),\n  takeEvery(types.UPDATING_RELATION_DATA, updateRelation),\n];\n","C:\\1.Regine\\PDA-APP\\frontend\\src\\utils\\overviewLayout.js",[],[],"C:\\1.Regine\\PDA-APP\\frontend\\src\\utils\\layout.js",[],[],"C:\\1.Regine\\PDA-APP\\frontend\\src\\serviceWorker.js",[],[],"C:\\1.Regine\\PDA-APP\\frontend\\src\\AnalysisPage\\components\\Upload\\UploadBox.js",[],[],"C:\\1.Regine\\PDA-APP\\frontend\\src\\globalstuff\\components\\NavBar\\NavBar.js",["132"],[],"import React from 'react';\r\nimport './NavBar.css';\r\n\r\nconst NavBar = () => {\r\n    const logo = require('../../../images/pda.png'); // with require\r\n    return(\r\n        <>\r\n        <nav>\r\n\r\n<div id=\"uppernav\">\r\n        \r\n        <div id=\"imagediv\"><a href=\"/home\"><img id=\"logoo\" src={logo} ></img></a></div>\r\n</div>\r\n            <div id=\"bottomnav\">\r\n             <div className=\"navflex\">\r\n                <a href=\"/about\" className=\"aboutclass\">ABOUT</a>\r\n                </div>\r\n            <div className=\"navflex\">\r\n                <a href=\"/Analysis\" className=\"analysisclass\">ANALYSIS</a>\r\n                </div>\r\n                <div className=\"navflex\">\r\n                <a href=\"/Dashboard\" className=\"dashboardclass\">DASHBOARD</a>\r\n                </div>\r\n                {/* <div className=\"navflex\">\r\n                <a href=\"BELOW OPTIONS\">ffeef</a>\r\n                </div> */}\r\n                <div className=\"navflex\">\r\n                <a href=\"/UploadUsingDropzoneContainer\">DROPZONE</a>\r\n                </div>\r\n                </div>\r\n                \r\n        </nav>\r\n        </>\r\n    )\r\n}\r\nexport default NavBar;","C:\\1.Regine\\PDA-APP\\frontend\\src\\AnalysisPage\\components\\Upload\\Upload.js",["133"],[],"// import Form from 'react-bootstrap/Form';\r\n// import Tabs from 'react-bootstrap/Tabs';\r\n// import Tab from 'react-bootstrap/Tab';\r\n// import Sonnet from 'react-bootstrap/Tab';\r\nimport React, {useState,useEffect} from 'react';\r\nimport './Upload.css';\r\n\r\n// #all the actions in the front end must be used to connect to the backend // form > function > jsonify > post to api\r\n\r\nfunction Upload() {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [textinput, settextinput] = useState(\"\");\r\n    const [CheckedBox1, setCheckedBox1] = useState(false);\r\n    const [CheckedBox2, setCheckedBox2] = useState(false);\r\n    const [Message, setMessage] = useState(\"\");\r\n    const [output, setOutput] = useState(\"\");\r\n\r\n    \r\n\r\n  let handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const data = {}\r\n    data[\"form\"] = {\r\n        \"title\": title,\r\n        \"textinput\": textinput,\r\n        \"CheckedBox1\": CheckedBox1,\r\n        \"CheckedBox2\": CheckedBox2,\r\n        \"Message\":Message,\r\n        \"output\":output,\r\n     \r\n    }\r\n    console.log(data)\r\n    try{\r\n      setMessage(\"Loading... \");\r\n  let res = await fetch(\"http://127.0.0.1:5000/\",{\r\n    method: \"POST\",\r\n    body: JSON.stringify(data),\r\n  });\r\n  let resJson =  await res.json();\r\n\r\n  if(res.status === 200 ){  \r\n    setTitle(\"\");\r\n    settextinput(\"\");\r\n    setMessage(\"Crawled successfully\");\r\n    // setOutput()\r\n    \r\n    \r\n    console.log(resJson);\r\n  }\r\n  else{\r\n    setMessage(\"Some error occured\");\r\n    // setOutput(\"Error occured while obtaining sentence, please try again later\");\r\n    console.log(\"error\")\r\n  }\r\n  if(resJson.success){\r\n    setOutput(resJson.result);\r\n  }\r\n  else{\r\n    setOutput(\"Error occurred while obtaining sentence, please try again later\");\r\n  }\r\n\r\n  // let out = await fetch;\r\n  // let resout = await out.json;\r\n  // console.log(res.result[0].summary_text);\r\n  // if (resout===200){\r\n  //   console.log(\"Into IF statement\");\r\n  //   setOutput(res.result[0].summary_text);\r\n  // }\r\n  // else{\r\n  //   setOutput(\"Error occurred while obtaining sentence, please try again later\");\r\n  // }\r\n  \r\n    }\r\ncatch(err){\r\n    console.log(err);\r\n  }\r\n}\r\n\r\n// const Upload = () => {\r\n    // const [key, setKey] = useState('home');\r\n  return(\r\n\r\n         <form onSubmit={handleSubmit}>\r\n        <div>\r\n        <input type = \"text\" value={title} onChange={(e)=>setTitle(e.target.value)} required autoFocus/>\r\n        <label>Title </label>\r\n        </div>\r\n        <div>\r\n        <textarea name=\"message\" value ={textinput} onChange={(e)=>settextinput(e.target.value)}></textarea>\r\n            <label>Text </label>\r\n        </div>\r\n        <div>\r\n        <input type=\"checkbox\" id=\"vehicle1\" value=\"vehicle1\" onClick={()=>{\r\n            setCheckedBox1(!CheckedBox1)\r\n        }} />\r\n        <label for=\"vehicle1\"> Option1</label>\r\n    </div>\r\n    <div>\r\n<input type=\"checkbox\" id=\"vehicle2\" value=\"vehicle2\" onClick={()=>{\r\n    setCheckedBox2(!CheckedBox2)\r\n}} />\r\n<label for=\"vehicle2\"> Option2</label>\r\n</div>\r\n      \r\n      \r\n        <input type=\"submit\" value=\"Submit\"/>\r\n     <div value={Message}>{Message}</div>\r\n     <div>{output}</div>\r\n        </form>\r\n        \r\n    )\r\n  }\r\n\r\n\r\n\r\n\r\n  export default Upload;\r\n","C:\\1.Regine\\PDA-APP\\frontend\\src\\AnalysisPage\\components\\Upload\\Options.js",["134","135","136","137","138"],[],"import React, {useState, useEffect} from \"react\";\n\n/* Import Components */\nimport CheckBox from \"./FormElements/Checkbox\";\nimport Select from \"./FormElements/Select\";\nimport Button from \"./FormElements/Button\";\n\nconst Options = (props) => {\n  const {setConfig, uploadFiles, config, files} = props\n  const [data, setData] = useState({platform: \"Dark Web\", visualisations: [\"Fake News\", \n  \"Stance Detection\", \"Summary\", \"Word Cloud\",\"Topic Modelling\", \"NER and Relation\"]})\n\n  const platformOptions = [\"Dark Web\", \"Twitter\", \"Facebook\", \"HardWareZone\", \"Reddit\"]\n\n  const visualisationOptions = [\"Fake News\", \"Stance Detection\", \"Summary\", \"Word Cloud\", \"Topic Modelling\", \"NER and Relation\"]\n\n  const handleInput = (e) => {\n    let value = e.target.value;\n    const visualisationData = data.visualisations\n    setData({\n      platform: value, visualisations: visualisationData \n    });\n  }\n\n  const handleCheckBox = (e) => {\n    //new selection is the option that is being checked or unchecked\n    const newSelection = e.target.value;\n    let newSelectionArray;\n    const platformData = data.platform;\n\n    if (data.visualisations.indexOf(newSelection) > -1) {\n      newSelectionArray = data.visualisations.filter(\n        s => s !== newSelection\n      );\n    } else {\n      newSelectionArray = [...data.visualisations, newSelection];\n    }\n\n    setData({\n      platform: platformData, visualisations: newSelectionArray\n    });\n  }\n\n  const handleNewData = (e) => {\n    return (setConfig(data))\n  }\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    return (setConfig(data))\n    // setConfig(JSON.stringify(data))\n    return (uploadFiles())\n  }\n\n const handleClearForm = (e) => {\n    e.preventDefault();\n    setData({\n        platform: \"\",\n        visualisations: []\n    });\n  }\n\n    return (\n      <form className=\"container-fluid\" onSubmit={handleFormSubmit}>\n        {/* Platform Selection */}\n        <Select\n          title={\"Platform\"}\n          name={\"platform\"}\n          options={platformOptions}\n          value={data.platform}\n          placeholder={\"Select Platform\"}\n          handleChange={handleInput}\n        />{\" \"}\n        \n        {/* Visualisation Section */}\n        <CheckBox\n          title={\"Visualisations\"}\n          name={\"visualisations\"}\n          options={visualisationOptions}\n          selectedOptions={data.visualisations}\n          handleChange={handleCheckBox}\n        />{\" \"}\n        \n        {/*Submit */}\n        <Button\n          action={handleFormSubmit}\n          type={\"primary\"}\n          title={\"Apply\"}\n          style={buttonStyle}\n        />{\" \"}\n        \n        {/* Clear the form */}\n        <Button\n          action={handleClearForm}\n          type={\"secondary\"}\n          title={\"Clear\"}\n          style={buttonStyle}\n        />{\" \"}\n        \n      </form>\n    );\n}\n\nconst buttonStyle = {\n  margin: \"10px 10px 10px 10px\"\n};\n\nexport default Options;",[],"C:\\1.Regine\\PDA-APP\\frontend\\src\\AnalysisPage\\components\\Upload\\FormElements\\Checkbox.js",[],[],"C:\\1.Regine\\PDA-APP\\frontend\\src\\AnalysisPage\\components\\Upload\\FormElements\\Button.js",["139"],[],"import React from \"react\";\n\nconst Button = props => {\n  // console.log(props.style);\n  return (\n    <button\n      style={props.style}\n      className={\n        props.type == \"primary\" ? \"btn btn-primary\" : \"btn btn-secondary\"\n      }\n      onClick={props.action}\n    >\n      {props.title}\n    </button>\n  );\n};\n\nexport default Button;\n","C:\\1.Regine\\PDA-APP\\frontend\\src\\AnalysisPage\\components\\Upload\\FormElements\\Select.js",[],[],"C:\\1.Regine\\PDA-APP\\frontend\\src\\test\\containers\\UploadForm.js",[],[],[],"C:\\1.Regine\\PDA-APP\\frontend\\src\\test\\components\\dropzoneField.js",[],[],"C:\\1.Regine\\PDA-APP\\frontend\\src\\test\\components\\imagePreview.js",[],[],"C:\\1.Regine\\PDA-APP\\frontend\\src\\test\\components\\showError.js",[],[],"C:\\1.Regine\\PDA-APP\\frontend\\src\\test\\components\\placeHolder.js",[],[],"C:\\1.Regine\\PDA-APP\\frontend\\src\\About\\About.js",["140"],[],"import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport './about.css';\r\nimport { Carousel } from 'antd';\r\n\r\n\r\nconst contentStyle = {\r\n    height: '190px',\r\n    color: '#fff',\r\n    lineHeight: '160px',\r\n    textAlign: 'center',\r\n    background: '#364d79',\r\n  };\r\nconst About = () => {\r\n    const policebg = require('../images/policebg.jpg'); // with require\r\n    \r\n    return(\r\n        <>\r\n        \r\n        <body>\r\n            \r\n            <section id=\"bodyone\">\r\n                <div id=\"policebg\">\r\n                    <div id=\"text\">\r\n\r\n                    \r\n                <p id=\"header\">A CAUSE GREATER THAN OURSELVES</p>\r\n                <p id=\"para\">Platform for Disinformation Analysis is built to analyse disinformation in our news today<br></br>\r\n                to keep singapore safe and sovereign for all singaporeans</p>\r\n                </div></div>\r\n               \r\n            </section>\r\n\r\n            <section id=\"bodytwo\">\r\n            <div className=\"featureflex\">\r\n            <h1>FEATURES</h1>\r\n            </div>\r\n            <div className=\"featureflex\">\r\n            <div>\r\n            \r\n            </div>\r\n            </div>\r\n            \r\n            </section>\r\n            \r\n           \r\n            \r\n            \r\n            <section id=\"bodyworkflow\">\r\n\r\n         <h1>Workflow</h1>\r\n  <Carousel autoplay>\r\n    <div>\r\n      <h3 style={contentStyle}><img src={policebg}></img></h3>\r\n    </div>\r\n    <div>\r\n      <h3 style={contentStyle}>2</h3>\r\n    </div>\r\n    <div>\r\n      <h3 style={contentStyle}>3</h3>\r\n    </div>\r\n    <div>\r\n      <h3 style={contentStyle}>4</h3>\r\n    </div>\r\n  </Carousel>\r\n\r\n        </section>\r\n        </body>\r\n    \r\n\r\n        </>\r\n    );\r\n};\r\nexport default About;",{"ruleId":"141","severity":1,"message":"142","line":3,"column":17,"nodeType":"143","messageId":"144","endLine":3,"endColumn":26},{"ruleId":"141","severity":1,"message":"145","line":8,"column":8,"nodeType":"143","messageId":"144","endLine":8,"endColumn":14},{"ruleId":"141","severity":1,"message":"146","line":12,"column":10,"nodeType":"143","messageId":"144","endLine":12,"endColumn":15},{"ruleId":"141","severity":1,"message":"147","line":12,"column":17,"nodeType":"143","messageId":"144","endLine":12,"endColumn":25},{"ruleId":"148","severity":1,"message":"149","line":313,"column":1,"nodeType":"150","endLine":318,"endColumn":3},{"ruleId":"151","severity":1,"message":"152","line":12,"column":44,"nodeType":"153","endLine":12,"endColumn":72},{"ruleId":"141","severity":1,"message":"142","line":5,"column":25,"nodeType":"143","messageId":"144","endLine":5,"endColumn":34},{"ruleId":"141","severity":1,"message":"142","line":1,"column":26,"nodeType":"143","messageId":"144","endLine":1,"endColumn":35},{"ruleId":"141","severity":1,"message":"154","line":9,"column":34,"nodeType":"143","messageId":"144","endLine":9,"endColumn":40},{"ruleId":"141","severity":1,"message":"155","line":9,"column":42,"nodeType":"143","messageId":"144","endLine":9,"endColumn":47},{"ruleId":"141","severity":1,"message":"156","line":44,"column":9,"nodeType":"143","messageId":"144","endLine":44,"endColumn":22},{"ruleId":"157","severity":1,"message":"158","line":52,"column":5,"nodeType":"159","messageId":"160","endLine":52,"endColumn":27},{"ruleId":"161","severity":1,"message":"162","line":9,"column":20,"nodeType":"163","messageId":"164","endLine":9,"endColumn":22},{"ruleId":"151","severity":1,"message":"152","line":54,"column":32,"nodeType":"153","endLine":54,"endColumn":52},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Upload' is defined but never used.","'check' is assigned a value but never used.","'setCheck' is assigned a value but never used.","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'config' is assigned a value but never used.","'files' is assigned a value but never used.","'handleNewData' is assigned a value but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]